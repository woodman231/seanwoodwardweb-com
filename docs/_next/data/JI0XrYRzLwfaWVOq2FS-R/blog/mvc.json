{"pageProps":{"categoryDetails":{"title":"MVC","slug":"mvc","description":"Model-view-controller (usually known as MVC) is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user.","uuid":"22613c13-391b-4d76-99ae-56d7bed1f921","articlesInCategory":[{"category":{"title":"MVC","slug":"mvc","description":"Model-view-controller (usually known as MVC) is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user.","uuid":"22613c13-391b-4d76-99ae-56d7bed1f921"},"title":"MVC Cascading Drop Downs","slug":"mvc-cascading-drop-downs","description":"Article discussing two different Cascading Drop Down Options in ASP.NET Core MVC","content":"<p>The purpose of this repository is to demonstrate two different ways of producting a cascading drop in ASP.NET Core MVC. This will work using .NET Framework as well.</p>\n<p>The first way has pure client side javascript filtering where all of the items for both the parent and child are rendered in the DOM, and only after changes are made in the parent drop down will JavvaScript manually rebuild the child Select List Options.</p>\n<p>The second way uses AJAX calls where AJAX calls are made every time the parent Select List is changed and a JavaScript creates the appropriate drop down elements based on the AJAX response.</p>\n<p>Link to repository: <a href=\"https://github.com/woodman231/MVCCascadingDropDowns\" target=\"_blank\" rel=\"noopener\">https://github.com/woodman231/MVCCascadingDropDowns</a></p>","uuid":"9b4d1b50-a74c-4e15-b726-aa2831fd001e","date":1621017560478},{"category":{"title":"MVC","slug":"mvc","description":"Model-view-controller (usually known as MVC) is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user.","uuid":"22613c13-391b-4d76-99ae-56d7bed1f921"},"title":"MVC EditorTemplate / DisplayTemplate Example","slug":"mvc-editortemplate--displaytemplate-example","description":"Refactor View code to be used on multiple views","content":"<p>Link to the GitHub repository for this example: <a href=\"https://github.com/woodman231/MVC-EditorTemplate-DisplayTemplate-Example\" target=\"_blank\" rel=\"noopener\">https://github.com/woodman231/MVC-EditorTemplate-DisplayTemplate-Example</a>.</p>\n<p>DisplayTemplates and EditorTemplates are particularly useful when a project should share View code across multiple Views.</p>\n<p>DisplayTemplates are particularly useful for sharing code on the Details and Delete Views.</p>\n<p>EditorTemplates are particularly useful for sharing code on the Create and Edit Views.</p>\n<p>The trick is to create a \"DisplayTemplate\" and \"EditorTemplate\" folder underneath the Views -&gt; Shared folder within the project.</p>\n<p>Once the folders are in place, Empty Views (cshtml) will need to be created with the name of the Model that will be passed in.</p>\n<p><img class=\"img-fluid\" src=\"https://github.com/woodman231/MVC-EditorTemplate-DisplayTemplate-Example/raw/main/MVC-EditorTemplate-DisplayTemplate-Example/wwwroot/KeyFolderStructure.PNG\" alt=\"\" width=\"168\" height=\"95\" /></p>\n<p>Each View should have the @model NameSpace.Models.ModelName that is being targetting for that view at the top, and then the rest of the code after that.</p>\n<p><img class=\"img-fluid\" src=\"https://github.com/woodman231/MVC-EditorTemplate-DisplayTemplate-Example/raw/main/MVC-EditorTemplate-DisplayTemplate-Example/wwwroot/SampleDisplayTemplate.PNG\" alt=\"\" width=\"454\" height=\"390\" /></p>\n<p>Once the code is ready the @Html.DisplayForModel() or @Html.EditorForModel() can be placed in places within other views of a similar model would be displayed.</p>\n<p><img class=\"img-fluid\" src=\"https://github.com/woodman231/MVC-EditorTemplate-DisplayTemplate-Example/raw/main/MVC-EditorTemplate-DisplayTemplate-Example/wwwroot/SampleDisplayForModel.PNG\" alt=\"\" width=\"455\" height=\"253\" /></p>\n<p>Now any changes made to the DisplayTemplate or EditorTemplate will be filled in on the views which were the @Html.DisplayForModel() or @Html.EditorForModel() were placed.</p>\n<p>In this example the Person DisplayTemplate is used on the Details and Delete Person Views. The Person EditorTemplate is used on the Create and Edit Person Views.</p>","uuid":"65c5456d-4f61-498a-a0d3-204bcc48bc5e","date":1619554416932}]}},"__N_SSG":true}