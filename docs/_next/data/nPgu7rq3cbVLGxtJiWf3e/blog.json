{"pageProps":{"allArticles":[{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center Outbound Call Tracker","slug":"contact-center-outbound-call-tracker","description":"When receiving a customer list to contact how can you be sure a customer is only contacted once, and how close is the list to being complete and in real-time?","content":"<p>There came a time when the contact center was asked to make outbound calls to a number of customers to follow-up for specific reasons. The desire was to have as much human-to-human contact as possible. The contact center may receive lists on an ad-hoc basis, but they did need a way to split the work up without causing duplication of work, and eliminating as much manual effor as possible. Their first attempt at doing this was with an excel sheet in Teams which does have the capability of real-time collaborative editting, but it still lead to problems.</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>Working with the business we came up with a standard format of an input excel sheet.</p>\n<p>I made the web app such that they could upload a spreadsheet that was in that format and it would insert requirement records based on that project. They could choose to have multiple spreadsheets per project, or just one spreadsheet per project if they like. They could also add as many spreadsheets at any time that they like. Once a spreadsheet was uploaded they then had the page load the list of requirements. They have row selectors were they could choose to assign those items to specific individuals, or they could just share the project link with the people that they wanted to jump on and start making calls, and when they clicked a row, that person would automatically lock that record.</p>\n<p>This application was designed using .NET Framework. The most unique thing about this application is that we obtained true real-time row-locking and reporing using SignalR Hubs on the server, and the appropriate SignalR javascript libraries as well as React on the client side. This application is hosted in a Load Balanced environment and so a Backplane for SignalR was necessary. My company does not have Redis at this time so we selected a SQL Server Backplane for SignalR. That way regardless of which server they were connected to, when the applicatoin told the client to refresh the data it would happen for all clients on all servers. Because the data was rendered using React it intelligently only re-rendered portions that were necessary. Plus if someone had a check box marked on a row during the refresh, that check mark would stay checked during that state update.</p>\n<p>The application has made it's way in to production on March 17th, 2021, but has not been used for an outbound call campaign yet.</p>","uuid":"25074246-20f1-49fc-aa1f-3e9e5ea24e15","date":1619030601909},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center Peer to Peer Assistance Tracker","slug":"contact-center-peer-to-peer-assistance-tracker","description":"Contact Center's are very well equipped to record interactions that agent's have with customers. This project was set up to help track agent's helping other agent's.","content":"<p>There came a time when the business discovered that they have some agents with more experience than others. They wanted to make those with more experience to have more accessibility for those that did not. They also wanted to identify trends in those questions and answers to help drive huddles and team meetings. In order to make that happen though a repository of what was asked by who, and how that was answered and by who and when was needed.</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>I developed the SQL server database by adding a new Schema and sufficient tables to the existing <a href=\"../../blog/projects/contact-center-master-roster\">MasterRoster</a> database as per the requirements given around what they wanted to have tracked. I also created user defined functions that returned tables and took a few parameters that the reports would be providing to generate the views which the web app would be consuming.</p>\n<p>I had just started learning about Blazor and decided that this would be a good project to apply those lessons to. This particular application was made as a Blazor server app (as apposed to a Blazor Web Assembly App).</p>\n<p>One thing that I found particularly interesting about coding in Blazor is that it is all C#. In a typical MVC environment you will be coding C# for your Controllers, and Models, and then views are a mixuture of HTML and JavaScript. So being able to rely strictly on one language and not the other was certainly an advantage. I personally have learned more about JavaScript than C# anyways, so it was challenging some times to understand a Blazor / C# equivelent to what I was trying to accomplish in JavaScript, but it was still possible. And when I just could not find a way around it, I was able to use the JavaScript interop functionality provided by Blazor, but I was able to keep that at a minimum.</p>\n<p>The application went live on March 17th, 2021 and still in use today. It is used by about 10 people per day and has already recorded 280 assistance requests.</p>","uuid":"68c38e47-9a1a-492d-8f7f-d84f1ff0360f","date":1619027900145},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center Multiple Knowledge Base Search","slug":"contact-center-multiple-knowledge-base-search","description":"Sending filter requests to multiple information silos and coming back with baked bread.","content":"<p>The contact center has been doing well at obtaining new clients. Each time a client was obtained a new knowledge management database and web app were set up. While the URLs, connection strings, and permissions were different. The database structure and application structure stayed mostly the same.</p>\n<p>As the company progressed, they looked for efficiencies, so naturally one efficiency that was discovered was to have agents trained to take calls from different clients. This led to the agent needing to have multiple favorites, and search through multiple databases to get the information that they needed. In order to make these agent's more efficient a new system that could query each of the knowledge bases was needed.</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>In this application I was fortunate that each database was at least on the same server. Therefore I could simply connect my web app to the \"master\" sql server database, and as I generated queries which my web app would use based on the user input I just had to make union queries that were in the form of selecting from [DatabaseName].[SchemaName].[TableName].</p>\n<p>I also set it up to scale, so that any time a new knowledge management system was set up that I would add that as a record to a metadata table that was tracking which databases were in scope for each query, and which database mapped to which URL.</p>\n<p>This application is using ASP.NET Core hosting a React app. So I first created a RESTFUL API for the React app to consume. Then client side routing and rendering was generated in the react app.</p>\n<p>The application went live on September 9th, 2020. I did not put any tracking on to this web app, but I do know that it is being used by more than 800 people making hundreds of queries per day.</p>","uuid":"e66a1502-5a26-46bd-9639-51f1aa64adce","date":1619026440849},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center After Hours End of Shift Reporting","slug":"contact-center-after-hours-end-of-shift-reporting","description":"What were the metrics by the end of the day? What were the metrics by the end of the shift? What alerts and client issues were encountered during the shift? Why sort through 3 different reports to make those call outs? What were the results of previous call outs without sorting through emails?","content":"<p>The After Hours End of Shift web application was unique in that they were compiling email messages to send to a distribution list of people to let those people know every night:</p>\n<ul>\n<li>Statistical Data for specific Telecom work queue's for the previous day</li>\n<li>Statistical Data for specific Telecom work queue's during the shift</li>\n<li>Client issues (such as an On-Call being unreachable)</li>\n<li>Alerts received from various monitoring systems</li>\n</ul>\n<p>Before this was made in to a web app / process automation they were recording the Client Issues and Alterts on SharePoint, then exporting them to Excel and marking the items as \"Sent\". Then they would have to dig through their emails to find the statistical data for the work queues. One email would contain the Days total, adn another email would contain the Shift's totals. This would be considered their End of Shift report.</p>\n<p>The challengers were not only finding those pieces of information to compile the End of Shift Report, but also to find the results of previous End of Shift reports except for wading through emails.</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>A few Schema's and Tables were added to the existing <a href=\"../../blog/projects/contact-center-master-roster\">MasterRoster</a> database.</p>\n<p>The Web app had connectivity to read/write access to the MasterRoster and read only access to the telecom system, such that we could use the actual SQL queries used by the reporting analyst team to generate in the web app the same reports that they were emailing out. The web app had functionality allowing them to create a new End of Shift report on a daily basis. They would add Client Issues and Alerts to each End of Shift report. They then could email the End of Shift report at will once they were satisfied that what was recorded on the web page was satisfactory. They also had a screen where they could look at any previous report.</p>\n<p>The Web App went live on April 29th, 2020 and is still in use today. It has been used to record 360 End of Shift reports, 507 Client Issues, and 345 Alerts.</p>","uuid":"18b0cfec-d58e-472c-ae29-ab729f759ab2","date":1619024993295},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center After Hours Messaging","slug":"contact-center-after-hours-messaging","description":"Messages received over night need to be handled in the morning.","content":"<p>The contact center had a process where they would receive specific phone calls from specific customer's which would be handled by a different on-site support team the following morning. This support team didn't have a formalized ticket system; however they did need to receive the messages. The group did not want to receive the messages one at a time, rather they wanted the messages to come in one day at a time in one spreadsheet.</p>\n<p>The business had already put together a SharePoint system where they would record these calls on a SharePoint list, export the list to Excel, email the list, and mark the items as \"Sent\".</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>I added one new Schema's and a few Tables to the existing <a href=\"../../blog/projects/contact-center-master-roster\">MasterRoster</a> database.</p>\n<p>The application was written using .NET Framework. One Web App, and a Microservice that ran every day to automatically send the night's messages in one spreadsheet to a specific distribution list of email addresses.</p>\n<p>The application went live on October 15th, 2019, and still in use today. It has been used to track over 7,500 messages.</p>","uuid":"76c46123-060a-410a-acc2-f6d43db1baaa","date":1618952270717},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center CSAT Removal Request System","slug":"contact-center-csat-removal-request-system","description":"Did the customer press the wrong button while rating their experience talking with their customer service representative? What happens then?","content":"<p>In a world where excellence is expected, and the input to a reporting system can be imperfect. It is hard to balance what is written in the record compared to what the customer intended to indicate and thus how well the contact center agent is performing.</p>\n<p>The Reporting Analysts and Quality Analysts do not have a way to overwrite the result of a Customer Satisfaction score; however, the agents, supervisors, and Quality Analysts did desire a way to appeal the results of a Customer Satisfaction score.</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>I added a few additional Schema's and Tables to the existing <a href=\"../../blog/projects/contact-center-master-roster\">MasterRoster</a> database. The design of this database was unique in which a number of the tables were load tables to take information from Telecom (Genesys / I3) system which would be used by the Reporting Analyst team to use as a new source of truth for CSAT reporting. I decided stil not to alter the data coming in from the telecom system, but approval CSAT removals would not appear in views.</p>\n<p>The application was written using .NET Framework.</p>\n<p>I programmed an API middleware that would take a request where the consumer would provide an Interaction Id, and the service would return CSAT data related to that Interaction Id. As a Supervisor is filling out the form to request a CSAT removal they could provide the Interaction Id, and then they woud click on a \"Validate / Populate\" button. The API would be invoked and the form fields would auto populate with the data that was returned from API, and then they could explain their reasons for the removal, and it would then go through the approval work-flow. Once approved the CSAT was removed from the view that the Reporting Analysts would use for calculating CSAT scores.</p>\n<p>The application went live on February 1st 2020.&nbsp; It is used by all Supervisors at the contact center on an as needs basis, a handful of Quality Managers (who review and approve / deny removal requests). The application has tracked over 7,500 CSAT removal requests.</p>","uuid":"3f538b70-39ba-4049-83ec-d11cf137c828","date":1618950904016},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center Master Roster","slug":"contact-center-master-roster","description":"Sometimes in a big organization the groups performing the various operations of a business do not manage their employee's the same way that Human Resources does. Workforce Management team members, Service Line Directors, Managers, and Supervisors all need to be on the same page about employee resources, and how they can be best utilized to maintain service levels.","content":"<p>Creating the MasterRoster Web App was chalk full of many opportunities to combine many processes that were being tracked in various spreadsheets.</p>\n<p>The primary focus of this application was to at least have data management around a specific demographic of employees at the contact center. Such that the heiararchy, capabilities, and availability of these contact center agents could be known by a Workforce Management team, as well as by Service Line Directors, Managers, and Supervisors. They also needed to have performance metric data about these employees as well as One on Ones, and Absences.</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>I designed the Microsoft SQL Server Database Structure. This design was especially important because it would be used as the backbone for other applications to be built on top of. I was aware that I was going to be able to setup some ETL processes from Human Resources, Windows, and Reporting Analyst teams in to this database. Thus this database was designed to have multipe Schema's and tables in those Schema's rather than all tables going to the dbo Schema.</p>\n<p>The standard adopted by the Web Development team that I am on chose ASP.NET Framework with Entity Framework as the server side framework to work with. So from a support stand point this was the framework used. Many Models, Views (allot of JavaScript for each view), and Controllers were developed in order to support all of the business processes that were requested by the stake holders.</p>\n<p>This application needed many ETL processes setup for it. Rather than SSIS packages, I chose to develop a series of Console Applications using TopShelf and Fluent Scheduler to turn the Console Application in to a microservice that could be hosted on other application servers. A particular advantage to this was that I was able to use a \"Core\" class Library that held all of the Database Models, and Entity Framework Context which could be a project reference for the Web Application, and each ETL Console application.</p>\n<p>The web application and 5 supporting ETL processes went live to production on August 7th, 2019. There have been many incremental updates to the system since then. The solution is still in use today by over 1,600 active Contact Center employees including Directors, Managers and Supervisors and 12 Workforce Management Employees. Not only is this a repository for agent demographics and statistics, but the results of over 23,700 One On One interactions have been recorded between Supervisor and Agent, and Manager and Supervisor as well.</p>","uuid":"f2518102-4f46-4eb0-bb00-af40dcc13b94","date":1618946270782},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center Quality Auditing Tracker","slug":"contact-center-quality-auditing-tracker","description":"Capturing and recording the results of a Quality Audit on an interaction might be easy. But when every agent needs to be audited 4 times a month it is hard to determine how audits have been performed and still need to be performed.","content":"<p>This process started by using the <a href=\"../../blog/projects/contact-center-master-roster\">MasterRoster</a> spreadsheet spoken of before. The Quality Management team at the Contact Center needed the basic demographic information on the agent's so that they could identify who needed to be audited. They also had a policy that each agent would be audited 4 times a month.</p>\n<p>After the MasterRoster was transitioned to a web application, it only made sense to make this the next business process to be transitioned to a web application.&nbsp;</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>Due to the design of the MasterRoster database it was easy to add an additional Schema and a few tables to the existing database.</p>\n<p>This is a .NET Framework application and is a sub-app of the main MasterRoster web app when looking at it from an IIS perspective.</p>\n<p>The application went live on October 16th, 2019. The application is used by 10 active Quality Auditors per day. It has recorded over 52,000 audit requirements and over 93,000 audit attempts.</p>","uuid":"303e5724-fe66-409a-8a7b-f459dd10be8c","date":1618945976951},{"category":{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711},"title":"Contact Center Message Processing Tracker","slug":"contact-center-message-processing-tracker","description":"The contact center is very good at measuring an agent's productivity while they are taking phone calls. What about when they need to work messages coming from different systems. How can you measure their productivity?","content":"<p>The contact center has a specific team that responds to messages that either show up as Work Items in the Electronic Health Record system or emails in Outlook. Since the items that they are working on are in two different systems it is hard to measure the response time and messages worked. Therefore a web application was requested where the people working the messages could enter generic details about each message they worked such that reporting on how productive they were in achieving service levels was possible. They also needed to keep track of how many messages were remaining to be worked by the end of each shift.</p>\n<p>I developed this application \"from soup to nuts\" as a full stack developer.</p>\n<p>I designed the Microsoft SQL Server Database Structure. This database design was fairly simple. I only needed a few Lookup tables and the main transactional table. The business already had a report which was an Excel workbook with 4 worksheets that categorized the information that they wanted. A number of Views were generated to support the data from these worksheets to be displayed in the web app.</p>\n<p>This particular Web App used ASP.NET Core MVC as it's framework. A particular interesting request for this was to have a \"Start\" / \"Stop\" timer because these employeer's are multi-taskers and must stop working on the message if they reeive a phone call. This allowed us to calculate the processing time of each message. I was able to implement this timer using JavaScript on the Create / Edit screens.</p>\n<p>The application went live on December 1st, 2018. The application is actively used by about 20 people per day and so far has tracked over 189,000 processed messages.</p>","uuid":"5664fb43-89df-41c2-adf6-20192deb6351","date":1618943456229}],"allCategories":[{"title":"Entity Framework","slug":"entity-framework","description":"Entity Framework (EF) is an open source object–relational mapping (ORM) framework for ADO.NET. It was originally shipped as an integral part of .NET Framework. Starting with Entity Framework version 6, it has been delivered separately from the .NET Framework.","uuid":"b18e16f6-36c2-4455-9bdb-012b9fa02128"},{"title":"MVC","slug":"mvc","description":"Model-view-controller (usually known as MVC) is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user.","uuid":"22613c13-391b-4d76-99ae-56d7bed1f921"},{"title":"Projects","slug":"projects","description":"A collection of Projects that I have been apart of.","uuid":"2ee94573-dd0f-4f8f-a5a5-8c64af57327e","date":1618936509711}]},"__N_SSG":true}